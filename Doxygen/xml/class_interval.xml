<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="class_interval" kind="class" language="C++" prot="public">
    <compoundname>Interval</compoundname>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="class_interval_1a815cb5fb627ed4553c42b987d41e2fa6" prot="public" static="no" mutable="no">
        <type>T</type>
        <definition>T Interval::top</definition>
        <argsstring></argsstring>
        <name>top</name>
        <briefdescription>
<para>upper limit of the interval </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/contour.cpp" line="43" column="7" bodyfile="src/contour.cpp" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_interval_1a097694b6079fdb99d67561962c163cdc" prot="public" static="no" mutable="no">
        <type>T</type>
        <definition>T Interval::bottom</definition>
        <argsstring></argsstring>
        <name>bottom</name>
        <briefdescription>
<para>lower limit of the interval </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/contour.cpp" line="45" column="7" bodyfile="src/contour.cpp" bodystart="45" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_interval_1ae48b9a9e9f672f81977627b609e32429" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Interval::Interval</definition>
        <argsstring>()</argsstring>
        <name>Interval</name>
        <briefdescription>
<para>Default constructor for creating an empty <ref refid="class_interval" kindref="compound">Interval</ref> type object. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>An empty <ref refid="class_interval" kindref="compound">Interval</ref> type object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/contour.cpp" line="48" column="5" bodyfile="src/contour.cpp" bodystart="48" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="class_interval_1ab14b7f9914f752358a71a376561dae16" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Interval::Interval</definition>
        <argsstring>(T bottom, T top)</argsstring>
        <name>Interval</name>
        <param>
          <type>T</type>
          <declname>bottom</declname>
        </param>
        <param>
          <type>T</type>
          <declname>top</declname>
        </param>
        <briefdescription>
<para>Constructor for creating an <ref refid="class_interval" kindref="compound">Interval</ref> type object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bottom</parametername>
</parameternamelist>
<parameterdescription>
<para>Value for bottom </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>top</parametername>
</parameternamelist>
<parameterdescription>
<para>Value for top </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An empty <ref refid="class_interval" kindref="compound">Interval</ref> type object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/contour.cpp" line="53" column="5" bodyfile="src/contour.cpp" bodystart="53" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="class_interval_1a74c86b4dcc468e66ce7bdf709b43af8c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Interval::operator&lt;</definition>
        <argsstring>(const Interval &amp;other) const</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="class_interval" kindref="compound">Interval</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Defines the less-than operator for set insertion and comparision. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>object with which comparision needs to be done </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if object less than other, else false </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/contour.cpp" line="61" column="5" bodyfile="src/contour.cpp" bodystart="61" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="class_interval_1abc0ddd748c8e5f1f09db46d965f399b0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Interval::operator==</definition>
        <argsstring>(const Interval &amp;other) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_interval" kindref="compound">Interval</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Defines the equals-to operator for comparision. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>object with which comparision needs to be done </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if object is equal to the other, else false </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/contour.cpp" line="68" column="10" bodyfile="src/contour.cpp" bodystart="68" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="class_interval_1ae48b9a9e9f672f81977627b609e32429" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Interval::Interval</definition>
        <argsstring>()</argsstring>
        <name>Interval</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/measure.cpp" line="26" column="5" bodyfile="src/measure.cpp" bodystart="26" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="class_interval_1ab40cefe95eec2d08ab55901a01f16c6e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Interval::Interval</definition>
        <argsstring>(T b, T t)</argsstring>
        <name>Interval</name>
        <param>
          <type>T</type>
          <declname>b</declname>
        </param>
        <param>
          <type>T</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/measure.cpp" line="27" column="5" bodyfile="src/measure.cpp" bodystart="27" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="class_interval_1a74c86b4dcc468e66ce7bdf709b43af8c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Interval::operator&lt;</definition>
        <argsstring>(const Interval &amp;other) const</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="class_interval" kindref="compound">Interval</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/measure.cpp" line="32" column="5" bodyfile="src/measure.cpp" bodystart="32" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="class_interval_1abc0ddd748c8e5f1f09db46d965f399b0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Interval::operator==</definition>
        <argsstring>(const Interval &amp;other) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_interval" kindref="compound">Interval</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/measure.cpp" line="36" column="10" bodyfile="src/measure.cpp" bodystart="36" bodyend="39"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A class to represent an interval between two lines in the 2D plane. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/contour.cpp" line="39" column="7" bodyfile="src/contour.cpp" bodystart="40" bodyend="72"/>
    <listofallmembers>
      <member refid="class_interval_1a097694b6079fdb99d67561962c163cdc" prot="public" virt="non-virtual"><scope>Interval</scope><name>bottom</name></member>
      <member refid="class_interval_1ae48b9a9e9f672f81977627b609e32429" prot="public" virt="non-virtual"><scope>Interval</scope><name>Interval</name></member>
      <member refid="class_interval_1ab14b7f9914f752358a71a376561dae16" prot="public" virt="non-virtual"><scope>Interval</scope><name>Interval</name></member>
      <member refid="class_interval_1ae48b9a9e9f672f81977627b609e32429" prot="public" virt="non-virtual"><scope>Interval</scope><name>Interval</name></member>
      <member refid="class_interval_1ab40cefe95eec2d08ab55901a01f16c6e" prot="public" virt="non-virtual"><scope>Interval</scope><name>Interval</name></member>
      <member refid="class_interval_1a74c86b4dcc468e66ce7bdf709b43af8c" prot="public" virt="non-virtual"><scope>Interval</scope><name>operator&lt;</name></member>
      <member refid="class_interval_1a74c86b4dcc468e66ce7bdf709b43af8c" prot="public" virt="non-virtual"><scope>Interval</scope><name>operator&lt;</name></member>
      <member refid="class_interval_1abc0ddd748c8e5f1f09db46d965f399b0" prot="public" virt="non-virtual"><scope>Interval</scope><name>operator==</name></member>
      <member refid="class_interval_1abc0ddd748c8e5f1f09db46d965f399b0" prot="public" virt="non-virtual"><scope>Interval</scope><name>operator==</name></member>
      <member refid="class_interval_1a815cb5fb627ed4553c42b987d41e2fa6" prot="public" virt="non-virtual"><scope>Interval</scope><name>top</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
