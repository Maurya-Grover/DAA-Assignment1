.TH "Interval" 3 "Wed Mar 17 2021" "Our Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Interval \- A class to represent an interval between two lines in the 2D plane\&.  

.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBInterval\fP ()"
.br
.RI "Default constructor for creating an empty \fBInterval\fP type object\&. "
.ti -1c
.RI "\fBInterval\fP (T \fBbottom\fP, T \fBtop\fP)"
.br
.RI "Constructor for creating an \fBInterval\fP type object\&. "
.ti -1c
.RI "bool \fBoperator<\fP (const \fBInterval\fP &other) const"
.br
.RI "Defines the less-than operator for set insertion and comparision\&. "
.ti -1c
.RI "bool \fBoperator==\fP (const \fBInterval\fP &other) const"
.br
.RI "Defines the equals-to operator for comparision\&. "
.ti -1c
.RI "\fBInterval\fP (T b, T t)"
.br
.ti -1c
.RI "bool \fBoperator<\fP (const \fBInterval\fP &other) const"
.br
.ti -1c
.RI "bool \fBoperator==\fP (const \fBInterval\fP &other) const"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "T \fBtop\fP"
.br
.RI "upper limit of the interval "
.ti -1c
.RI "T \fBbottom\fP"
.br
.RI "lower limit of the interval "
.in -1c
.SH "Detailed Description"
.PP 
A class to represent an interval between two lines in the 2D plane\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Interval::Interval ()\fC [inline]\fP"

.PP
Default constructor for creating an empty \fBInterval\fP type object\&. 
.PP
\fBReturns\fP
.RS 4
An empty \fBInterval\fP type object 
.RE
.PP

.SS "Interval::Interval (T bottom, T top)\fC [inline]\fP"

.PP
Constructor for creating an \fBInterval\fP type object\&. 
.PP
\fBParameters\fP
.RS 4
\fIbottom\fP Value for bottom 
.br
\fItop\fP Value for top 
.RE
.PP
\fBReturns\fP
.RS 4
An empty \fBInterval\fP type object 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "bool Interval::operator< (const \fBInterval\fP & other) const\fC [inline]\fP"

.PP
Defines the less-than operator for set insertion and comparision\&. 
.PP
\fBParameters\fP
.RS 4
\fIother\fP object with which comparision needs to be done 
.RE
.PP
\fBReturns\fP
.RS 4
true if object less than other, else false 
.RE
.PP

.SS "bool Interval::operator== (const \fBInterval\fP & other) const\fC [inline]\fP"

.PP
Defines the equals-to operator for comparision\&. 
.PP
\fBParameters\fP
.RS 4
\fIother\fP object with which comparision needs to be done 
.RE
.PP
\fBReturns\fP
.RS 4
true if object is equal to the other, else false 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for Our Project from the source code\&.
